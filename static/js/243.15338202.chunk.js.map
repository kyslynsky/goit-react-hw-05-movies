{"version":3,"file":"static/js/243.15338202.chunk.js","mappings":"8JAEaA,E,QAAOC,GAAAA,EAAH,+C,SCEJC,EAAa,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC3B,OACE,SAAC,IAAD,WACE,SAACH,EAAD,UAAOG,KAGZ,C,sNCRYC,EAAcH,EAAAA,GAAAA,GAAH,uJAOXI,EAAaJ,EAAAA,GAAAA,GAAH,0C,mBCwBvB,EA5BqB,WACnB,MCD6B,WAC7B,IAAMK,GAAOC,EAAAA,EAAAA,MAAPD,GACN,GAA8BE,EAAAA,EAAAA,YAA9B,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAgBR,GACbS,MAAK,SAAAC,GAEgB,IAAhBA,EAAKC,OAKTP,EAAWM,GAJTJ,EAAS,gBAMZ,IACAM,OAAM,SAAAP,GAAK,OAAIC,EAASD,EAAMR,QAAnB,GAEf,GAAE,CAACG,IAEG,CAACG,EAASE,EAClB,CDrB0BQ,GAAzB,eAAOV,EAAP,KAAgBE,EAAhB,KAEA,OACE,+BACGA,IAAS,SAACS,EAAA,EAAD,CAAYjB,QAASQ,KAC/B,SAACP,EAAD,iBACGK,QADH,IACGA,OADH,EACGA,EAASY,KAAI,gBAAGf,EAAH,EAAGA,GAAIgB,EAAP,EAAOA,KAAMC,EAAb,EAAaA,aAAcC,EAA3B,EAA2BA,UAA3B,OACZ,UAACnB,EAAD,YACE,gBACEoB,IACEF,EAAY,yCAC0BA,GAClCG,EAENC,IAAKL,KAEP,uBAAIA,KACJ,wCACa,0BAAOE,SAXLlB,EADL,QAmBrB,C,4ME7BOsB,EAAsBC,mCACxBC,EAAU,+BAGHC,EAAiB,mCAAG,WAAMC,GAAN,uFACRC,IAAAA,IAAA,gBACnBH,EADmB,wCACoBF,EADpB,iBAC8CI,IAFtC,cACzBE,EADyB,yBAIxBA,EAASlB,KAAKmB,SAJU,2CAAH,sDAOjBC,EAAqB,mCAAG,WAAOC,EAAOL,GAAd,uFACZC,IAAAA,IAAA,gBACnBH,EADmB,iCACaF,EADb,iCACuDS,EADvD,iBACqEL,EADrE,yBADY,cAC7BE,EAD6B,yBAI5BA,EAASlB,KAAKmB,SAJc,2CAAH,wDAOrBG,EAAe,mCAAG,WAAMC,GAAN,uFACNN,IAAAA,IAAA,gBACnBH,EADmB,kBACFS,EADE,oBACiBX,EADjB,oBADM,cACvBM,EADuB,yBAItBA,EAASlB,MAJa,2CAAH,sDAOfF,EAAe,mCAAG,WAAMyB,GAAN,uFACNN,IAAAA,IAAA,gBACnBH,EADmB,kBACFS,EADE,4BACyBX,EADzB,oBADM,cACvBM,EADuB,yBAItBA,EAASlB,KAAKwB,MAJQ,2CAAH,sDAOfC,EAAe,mCAAG,WAAMF,GAAN,uFACNN,IAAAA,IAAA,gBACnBH,EADmB,kBACFS,EADE,4BACyBX,EADzB,2BADM,cACvBM,EADuB,yBAItBA,EAASlB,KAAKmB,SAJQ,2CAAH,qD","sources":["components/Error/Error.styled.js","components/Error/Error.jsx","components/MovieCredits/MovieCredits.styled.js","components/MovieCredits/MovieCredits.jsx","hooks/useFetchCredits.jsx","services/movies-api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Text = styled.p`\n  text-align: center;\n`;\n","import PropTypes from 'prop-types';\nimport { Container } from 'components/GlobalStyles';\nimport { Text } from './Error.styled';\n\nexport const ErrorBlock = ({ message }) => {\n  return (\n    <Container>\n      <Text>{message}</Text>\n    </Container>\n  );\n};\n\nErrorBlock.propTypes = {\n  message: PropTypes.string,\n};\n","import styled from 'styled-components';\n\nexport const CreditsList = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));\n  grid-gap: 16px;\n  padding-bottom: 24px;\n`;\n\nexport const CreditItem = styled.li`\n  padding: 35px;\n`;\n","import { useFetchCredits } from 'hooks/useFetchCredits';\nimport pic from 'img/no-poster.jpg';\nimport { CreditsList, CreditItem } from './MovieCredits.styled';\nimport { ErrorBlock } from 'components/Error';\n\nconst MovieCredits = () => {\n  const [credits, error] = useFetchCredits();\n\n  return (\n    <section>\n      {error && <ErrorBlock message={error} />}\n      <CreditsList>\n        {credits?.map(({ id, name, profile_path, character }) => (\n          <CreditItem key={id}>\n            <img\n              src={\n                profile_path\n                  ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                  : pic\n              }\n              alt={name}\n            />\n            <p>{name}</p>\n            <p>\n              Character: <span>{character}</span>\n            </p>\n          </CreditItem>\n        ))}\n      </CreditsList>\n    </section>\n  );\n};\n\nexport default MovieCredits;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCredits } from 'services/movies-api';\n\n\nexport const useFetchCredits = () => {\n  let { id } = useParams();\n  const [credits, setCredits] = useState();\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    getMovieCredits(id)\n      .then(data => {\n\n        if (data.length === 0) {\n          setError('Not available');\n          return;\n        }\n\n        setCredits(data);\n\n      })\n      .catch(error => setError(error.message))\n\n  }, [id]);\n\n  return [credits, error];\n};\n","import axios from 'axios';\n\nconst { REACT_APP_API_KEY } = process.env;\nconst baseUrl = 'https://api.themoviedb.org/3';\n// axios.defaults.baseURL = 'https://api.themoviedb.org/3'; not working\n\nexport const getTrendingMovies = async page => {\n  const response = await axios.get(`\n    ${baseUrl}/trending/movie/week?api_key=${REACT_APP_API_KEY}&page=${page}`);\n\n  return response.data.results;\n};\n\nexport const getMovieBySearchQuery = async (query, page) => {\n  const response = await axios.get(`\n    ${baseUrl}/search/movie?api_key=${REACT_APP_API_KEY}&language=en-US&query=${query}&page=${page}&include_adult=false`);\n\n  return response.data.results;\n};\n\nexport const getMovieDetails = async movieId => {\n  const response = await axios.get(`\n    ${baseUrl}/movie/${movieId}?api_key=${REACT_APP_API_KEY}&language=en-US`);\n\n  return response.data;\n};\n\nexport const getMovieCredits = async movieId => {\n  const response = await axios.get(`\n    ${baseUrl}/movie/${movieId}/credits?api_key=${REACT_APP_API_KEY}&language=en-US`);\n\n  return response.data.cast;\n};\n\nexport const getMovieReviews = async movieId => {\n  const response = await axios.get(`\n    ${baseUrl}/movie/${movieId}/reviews?api_key=${REACT_APP_API_KEY}&language=en-US&page=1`);\n\n  return response.data.results;\n};\n"],"names":["Text","styled","ErrorBlock","message","CreditsList","CreditItem","id","useParams","useState","credits","setCredits","error","setError","useEffect","getMovieCredits","then","data","length","catch","useFetchCredits","Error","map","name","profile_path","character","src","pic","alt","REACT_APP_API_KEY","process","baseUrl","getTrendingMovies","page","axios","response","results","getMovieBySearchQuery","query","getMovieDetails","movieId","cast","getMovieReviews"],"sourceRoot":""}