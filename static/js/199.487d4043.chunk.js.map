{"version":3,"file":"static/js/199.487d4043.chunk.js","mappings":"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","sources":["components/MoviesListItem/MoviesListItem.styled.js","components/MoviesListItem/MoviesListItem.jsx","components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.jsx","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","pages/Home.jsx","hooks/useFetchTrending.jsx","services/movies-api.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const MovieItem = styled.li`\n  /* box-shadow: rgba(9, 30, 66, 0.25) 0px 4px 8px -2px,\n    rgba(9, 30, 66, 0.08) 0px 0px 0px 1px; */\n  box-shadow: 0 4px 3px -4px lightblue;\n  border-radius: 4px;\n  transition: all 0.2s ease-in-out;\n\n  &:hover,\n  &:focus {\n    scale: 1.02;\n  }\n`;\n\nexport const MovieLink = styled(Link)`\n  text-decoration: none;\n  color: #fff;\n  font-size: 1rem;\n  transition: all 0.2s ease-in-out;\n\n  ${MovieItem}:hover &,\n  ${MovieItem}:focus & {\n    color: #d9514eff;\n  }\n`;\n\nexport const MovieTitle = styled.p`\n  padding: 14px;\n  font-weight: 500;\n`;\n\nexport const MoviePoster = styled.img`\n  border-radius: 4px 4px 0 0;\n  object-fit: cover;\n  height: 60vh;\n\n  @media screen and (min-width: 425px) {\n    height: 80vh;\n  }\n\n  @media screen and (min-width: 768px) {\n    height: 70vh;\n  }\n\n  @media screen and (min-width: 1024px) {\n    height: 65vh;\n  }\n\n  @media screen and (min-width: 1440px) {\n    height: 60vh;\n  }\n\n  @media screen and (min-width: 2000px) {\n    height: 25vh;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\nimport pic from 'img/no-poster.jpg';\nimport {\n  MovieItem,\n  MovieLink,\n  MovieTitle,\n  MoviePoster,\n} from './MoviesListItem.styled';\n\nconst MoviesListItem = ({ id, title, poster }) => {\n  const location = useLocation();\n\n  return (\n    <MovieItem>\n      <MovieLink to={`/movies/${id}`} state={{ from: location }}>\n        <div>\n          <MoviePoster\n            src={poster ? `https://image.tmdb.org/t/p/w500${poster}` : pic}\n            alt={title}\n          />\n        </div>\n        <MovieTitle>{title ? title : 'No title here'}</MovieTitle>\n      </MovieLink>\n    </MovieItem>\n  );\n};\n\nexport default MoviesListItem;\n\nMoviesListItem.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  poster: PropTypes.string,\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));\n  grid-gap: 16px;\n  margin-top: 40px;\n  padding-bottom: 24px;\n`;\n","import PropTypes from 'prop-types';\nimport MoviesListItem from 'components/MoviesListItem';\nimport { List } from './MoviesList.styled';\n\nconst MoviesList = ({ data }) => {\n  return (\n    <List>\n      {data.map(({ id, original_title, poster_path }) => {\n        return (\n          <MoviesListItem\n            key={id}\n            id={id}\n            title={original_title}\n            poster={poster_path}\n          />\n        );\n      })}\n    </List>\n  );\n};\n\nexport default MoviesList;\n\nMoviesList.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      original_title: PropTypes.string.isRequired,\n      poster_path: PropTypes.string,\n    })\n  ),\n};\n","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import MoviesList from 'components/MoviesList';\nimport { useFetchTrending } from 'hooks/useFetchTrending';\nimport { Container } from 'components/GlobalStyles';\nconst Home = () => {\n  const [movies] = useFetchTrending();\n\n  return (\n    <Container>\n      <main>\n        <h1>Trending today</h1>\n        {movies.length > 0 && <MoviesList data={movies} />}\n      </main>\n    </Container>\n  );\n};\n\nexport default Home;\n","import { useState, useEffect } from 'react';\nimport { getTrendingMovies } from 'services/movies-api';\nimport { Notify } from 'notiflix';\n\nexport const useFetchTrending = () => {\n  const [movies, setMovies] = useState([]);\n  const [page, setPage] = useState(1);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    getTrendingMovies(page)\n      .then(data => {\n        if (data.length === 0) {\n          Notify.warning('We are sorry! There is no results', {\n            clickToClose: true,\n          });\n          return;\n        }\n\n        setMovies([...data]);\n        setPage(page);\n      })\n      .catch(error => {\n        Notify.failure(error.message, {\n          clickToClose: true,\n        });\n        setError(error.message);\n      })\n  }, [page]);\n\n  return [movies, error];\n};\n// Add return page to handle pagination ","import axios from 'axios';\n\nconst { REACT_APP_API_KEY } = process.env;\nconst baseUrl = 'https://api.themoviedb.org/3';\n// axios.defaults.baseURL = 'https://api.themoviedb.org/3'; not working\n\nexport const getTrendingMovies = async page => {\n  const response = await axios.get(`\n    ${baseUrl}/trending/movie/week?api_key=${REACT_APP_API_KEY}&page=${page}`);\n\n  return response.data.results;\n};\n\nexport const getMovieBySearchQuery = async (query, page) => {\n  const response = await axios.get(`\n    ${baseUrl}/search/movie?api_key=${REACT_APP_API_KEY}&language=en-US&query=${query}&page=${page}&include_adult=false`);\n\n  return response.data.results;\n};\n\nexport const getMovieDetails = async movieId => {\n  const response = await axios.get(`\n    ${baseUrl}/movie/${movieId}?api_key=${REACT_APP_API_KEY}&language=en-US`);\n\n  return response.data;\n};\n\nexport const getMovieCredits = async movieId => {\n  const response = await axios.get(`\n    ${baseUrl}/movie/${movieId}/credits?api_key=${REACT_APP_API_KEY}&language=en-US`);\n\n  return response.data.cast;\n};\n\nexport const getMovieReviews = async movieId => {\n  const response = await axios.get(`\n    ${baseUrl}/movie/${movieId}/reviews?api_key=${REACT_APP_API_KEY}&language=en-US&page=1`);\n\n  return response.data.results;\n};\n"],"names":["MovieItem","styled","MovieLink","Link","MovieTitle","MoviePoster","id","title","poster","location","useLocation","to","state","from","src","pic","alt","List","data","map","original_title","poster_path","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","unsupportedIterableToArray","TypeError","useState","movies","setMovies","page","setPage","error","setError","useEffect","getTrendingMovies","then","length","Notify","clickToClose","catch","message","useFetchTrending","MoviesList","REACT_APP_API_KEY","process","baseUrl","axios","response","results","getMovieBySearchQuery","query","getMovieDetails","movieId","getMovieCredits","cast","getMovieReviews"],"sourceRoot":""}